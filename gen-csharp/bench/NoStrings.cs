/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace bench
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class NoStrings : TBase
  {
    private int _Abc;
    private long _Def;
    private List<short> _Xyz;

    public int Abc
    {
      get
      {
        return _Abc;
      }
      set
      {
        __isset.Abc = true;
        this._Abc = value;
      }
    }

    public long Def
    {
      get
      {
        return _Def;
      }
      set
      {
        __isset.Def = true;
        this._Def = value;
      }
    }

    public List<short> Xyz
    {
      get
      {
        return _Xyz;
      }
      set
      {
        __isset.Xyz = true;
        this._Xyz = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Abc;
      public bool Def;
      public bool Xyz;
    }

    public NoStrings() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Abc = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              Def = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Xyz = new List<short>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  short _elem2;
                  _elem2 = iprot.ReadI16();
                  Xyz.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("NoStrings");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.Abc) {
        field.Name = "Abc";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Abc);
        oprot.WriteFieldEnd();
      }
      if (__isset.Def) {
        field.Name = "Def";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Def);
        oprot.WriteFieldEnd();
      }
      if (Xyz != null && __isset.Xyz) {
        field.Name = "Xyz";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I16, Xyz.Count));
          foreach (short _iter3 in Xyz)
          {
            oprot.WriteI16(_iter3);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("NoStrings(");
      bool __first = true;
      if (__isset.Abc) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Abc: ");
        __sb.Append(Abc);
      }
      if (__isset.Def) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Def: ");
        __sb.Append(Def);
      }
      if (Xyz != null && __isset.Xyz) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Xyz: ");
        __sb.Append(Xyz);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
