/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace bench
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Complex : TBase
  {
    private string _Foo;
    private int _Bar;
    private List<int> _Baz;
    private Dictionary<string, string> _Abc;
    private List<Person> _People;

    public string Foo
    {
      get
      {
        return _Foo;
      }
      set
      {
        __isset.Foo = true;
        this._Foo = value;
      }
    }

    public int Bar
    {
      get
      {
        return _Bar;
      }
      set
      {
        __isset.Bar = true;
        this._Bar = value;
      }
    }

    public List<int> Baz
    {
      get
      {
        return _Baz;
      }
      set
      {
        __isset.Baz = true;
        this._Baz = value;
      }
    }

    public Dictionary<string, string> Abc
    {
      get
      {
        return _Abc;
      }
      set
      {
        __isset.Abc = true;
        this._Abc = value;
      }
    }

    public List<Person> People
    {
      get
      {
        return _People;
      }
      set
      {
        __isset.People = true;
        this._People = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Foo;
      public bool Bar;
      public bool Baz;
      public bool Abc;
      public bool People;
    }

    public Complex() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Foo = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Bar = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Baz = new List<int>();
                TList _list4 = iprot.ReadListBegin();
                for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                {
                  int _elem6;
                  _elem6 = iprot.ReadI32();
                  Baz.Add(_elem6);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Map) {
              {
                Abc = new Dictionary<string, string>();
                TMap _map7 = iprot.ReadMapBegin();
                for( int _i8 = 0; _i8 < _map7.Count; ++_i8)
                {
                  string _key9;
                  string _val10;
                  _key9 = iprot.ReadString();
                  _val10 = iprot.ReadString();
                  Abc[_key9] = _val10;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                People = new List<Person>();
                TList _list11 = iprot.ReadListBegin();
                for( int _i12 = 0; _i12 < _list11.Count; ++_i12)
                {
                  Person _elem13;
                  _elem13 = new Person();
                  _elem13.Read(iprot);
                  People.Add(_elem13);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Complex");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Foo != null && __isset.Foo) {
        field.Name = "Foo";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Foo);
        oprot.WriteFieldEnd();
      }
      if (__isset.Bar) {
        field.Name = "Bar";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Bar);
        oprot.WriteFieldEnd();
      }
      if (Baz != null && __isset.Baz) {
        field.Name = "Baz";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, Baz.Count));
          foreach (int _iter14 in Baz)
          {
            oprot.WriteI32(_iter14);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Abc != null && __isset.Abc) {
        field.Name = "Abc";
        field.Type = TType.Map;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, Abc.Count));
          foreach (string _iter15 in Abc.Keys)
          {
            oprot.WriteString(_iter15);
            oprot.WriteString(Abc[_iter15]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (People != null && __isset.People) {
        field.Name = "People";
        field.Type = TType.List;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, People.Count));
          foreach (Person _iter16 in People)
          {
            _iter16.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("Complex(");
      bool __first = true;
      if (Foo != null && __isset.Foo) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Foo: ");
        __sb.Append(Foo);
      }
      if (__isset.Bar) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Bar: ");
        __sb.Append(Bar);
      }
      if (Baz != null && __isset.Baz) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Baz: ");
        __sb.Append(Baz);
      }
      if (Abc != null && __isset.Abc) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Abc: ");
        __sb.Append(Abc);
      }
      if (People != null && __isset.People) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("People: ");
        __sb.Append(People);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
